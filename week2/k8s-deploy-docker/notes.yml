# Docker & Kubernetes Notes

---

## Step-by-Step: Build Docker Image & Deploy to Kubernetes

### Step 1: Build Docker Image

```bash
# Navigate to your project folder containing Dockerfile
cd ~/nginx-app

# Build the Docker image
docker build -t my-nginx .
```

---

### Step 2: Tag the Image for Docker Hub

```bash
docker tag my-nginx yaswanthmitta/my-nginx:v1
```

---

### Step 3: Login to Docker Hub

```bash
docker login -u yaswanthmitta
```

> Use your **Docker Hub access token** if you have 2FA enabled.

---

### Step 4: Push Image to Docker Hub

```bash
docker push yaswanthmitta/my-nginx:v1
```

---

### Step 5: Use Image in Kubernetes Deployment

<details>
<summary>Show deployment.yaml</summary>

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: yaswanthmitta/my-nginx:v1
        ports:
        - containerPort: 80
```

</details>

```bash
kubectl apply -f deployment.yaml
```

---

### Step 6: Expose Deployment Using a NodePort Service

<details>
<summary>Show service.yaml</summary>

```yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080
```

</details>

```bash
kubectl apply -f service.yaml
```

---

### Step 7: Access the App in Browser

Open in your browser:

```bash
http://<your-ec2-public-ip>:30080
```

You should see the default Nginx welcome page if everything worked!














## Basic Steps to Deploy Your Dockerized App to Kubernetes Using Docker Hub

First, you need to create a Docker image of your application.

Then, you tag this image with your Docker Hub username and a version tag.

Next, you log in to your Docker Hub account from the terminal using your username and an access token if required.

After logging in, you push the tagged Docker image to your Docker Hub repository.

Once the image is available in Docker Hub, you write a Kubernetes deployment YAML file that references your pushed image. This file tells Kubernetes how many replicas you want, which image to use, and what container port to expose.

You apply this deployment using the `kubectl apply` command.

After the deployment, you create a Kubernetes service YAML file. This exposes your app to the outside world, typically using a NodePort or LoadBalancer. You apply this service file with another `kubectl apply` command.

To test if your app is working, get the public IP of your EC2 instance and make a request to the NodePort defined in your service file. You can open the IP and port in a browser or use `curl` from the command line.

If everything is set up correctly, you should see your application running.